#usda 1.0
(
    defaultPrim = "Cube_AnimX"
    endTimeCode = 241
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "CubeAgent" (
    kind = "component"
)
{
    def Xform "Rig"
    {
        string[] primvars:agentname (
            interpolation = "constant"
        )
        string[] primvars:agentname.timeSamples = {
            1: ["Agent_from_rig_rest_pose"],
            241: ["Agent_from_rig_rest_pose"],
        }
        int[] primvars:agentname:indices = None
        append rel skel:animationSource = </CubeAgent/Rig/animation>
        matrix4d xformOp:transform.timeSamples = {
            1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
            241: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def SkelAnimation "animation"
        {
            uniform token[] joints = ["BottomJoint", "__locomotion__", "BottomJoint/TopJoint"]
            quatf[] rotations.timeSamples = {
                1: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                241: [(0.70710677, 0.70710677, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
            }
            half3[] scales.timeSamples = {
                1: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                241: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            }
            float3[] translations.timeSamples = {
                1: [(0, 0, 0), (0, 0, 0), (0, 1, 0)],
                241: [(0, 0, 0), (0, 0, 0), (0, 1, 0)],
            }
        }
    }
}

def Xform "Cube_AnimX" (
    kind = "component"
)
{
    def Scope "agentdefinitions"
    {
        uniform token visibility = "invisible"

        def Scope "Agent_from_rig_rest_pose"
        {
            def Scope "layers"
            {
            }

            def Scope "shapelibrary"
            {
            }

            def Skeleton "skeleton"
            {
                uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (0.9999999403953552, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 1, 0, 1) )]
                uniform token[] jointNames = ["BottomJoint", "__locomotion__", "TopJoint"]
                uniform token[] joints = ["BottomJoint", "__locomotion__", "BottomJoint/TopJoint"]
                uniform token purpose = "guide"
                uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (0.9999999403953552, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 1, 0, 1) )]
            }
        }
    }
}

