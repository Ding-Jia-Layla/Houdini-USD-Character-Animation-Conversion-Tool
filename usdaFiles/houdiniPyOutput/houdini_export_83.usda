#usda 1.0
(
    defaultPrim = "Model"
    endTimeCode = 10
    metersPerUnit = 0.01
    startTimeCode = 1
    upAxis = "Y"
)

def SkelRoot "Model" (
    prepend apiSchemas = ["SkelBindingAPI"]
    kind = "component"
)
{
    def Skeleton "Skel" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (-0, 1, 0, 0), (0, -0, 1, 0), (0, 0, -0, 1) ), ( (1, 0, -0, 0), (-0, 1, -0, 0), (0, -0, 1, 0), (0, -0, 2, 1) ), ( (1, 0, -0, 0), (-0, 1, -0, 0), (0, -0, 1, 0), (0, -0, 4, 1) )]
        uniform token[] joints = ["arm_Shoulder", "arm_Shoulder/arm_Elbow", "arm_Shoulder/arm_Elbow/arm_Hand"]
        uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (-0, 1, 0, 0), (0, -0, 1, 0), (0, 0, -0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, -0, 2, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 2, 1) )]
        rel skel:animationSource = </Model/Skel/Anim>

        def SkelAnimation "Anim"
        {
            uniform token[] joints = ["arm_Shoulder/arm_Elbow"]
            quatf[] rotations.timeSamples = {
                1: [(1, 0, 0, 0)],
                2: [(1, 0, 0, 0)],
                3: [(1, 0, 0, 0)],
                4: [(1, 0, 0, 0)],
                5: [(1, 0, 0, 0)],
                6: [(1, 0, 0, 0)],
                7: [(1, 0, 0, 0)],
                8: [(1, 0, 0, 0)],
                9: [(1, 0, 0, 0)],
                10: [(1, 0, 0, 0)],
                11: [(1, 0, 0, 0)],
                12: [(1, 0, 0, 0)],
                13: [(1, 0, 0, 0)],
                14: [(1, 0, 0, 0)],
                15: [(1, 0, 0, 0)],
                16: [(1, 0, 0, 0)],
                17: [(1, 0, 0, 0)],
                18: [(1, 0, 0, 0)],
                19: [(1, 0, 0, 0)],
                20: [(1, 0, 0, 0)],
                21: [(1, 0, 0, 0)],
                22: [(1, 0, 0, 0)],
                23: [(1, 0, 0, 0)],
                24: [(1, 0, 0, 0)],
                25: [(1, 0, 0, 0)],
                26: [(1, 0, 0, 0)],
                27: [(1, 0, 0, 0)],
                28: [(1, 0, 0, 0)],
                29: [(1, 0, 0, 0)],
                30: [(1, 0, 0, 0)],
                31: [(1, 0, 0, 0)],
                32: [(1, 0, 0, 0)],
                33: [(1, 0, 0, 0)],
                34: [(1, 0, 0, 0)],
                35: [(1, 0, 0, 0)],
                36: [(1, 0, 0, 0)],
                37: [(1, 0, 0, 0)],
                38: [(1, 0, 0, 0)],
                39: [(1, 0, 0, 0)],
                40: [(1, 0, 0, 0)],
                41: [(1, 0, 0, 0)],
                42: [(1, 0, 0, 0)],
                43: [(1, 0, 0, 0)],
                44: [(1, 0, 0, 0)],
                45: [(1, 0, 0, 0)],
                46: [(1, 0, 0, 0)],
                47: [(1, 0, 0, 0)],
                48: [(1, 0, 0, 0)],
                49: [(1, 0, 0, 0)],
                50: [(1, 0, 0, 0)],
                51: [(1, 0, 0, 0)],
                52: [(1, 0, 0, 0)],
                53: [(1, 0, 0, 0)],
                54: [(1, 0, 0, 0)],
                55: [(1, 0, 0, 0)],
                56: [(1, 0, 0, 0)],
                57: [(1, 0, 0, 0)],
                58: [(1, 0, 0, 0)],
                59: [(1, 0, 0, 0)],
                60: [(1, 0, 0, 0)],
            }
            half3[] scales = [(1, 1, 1)]
            float3[] translations = [(0, 0, 0)]
        }
    }

    def Mesh "Arm" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [3, 1, 0, 2, 7, 5, 4, 6, 9, 7, 6, 8, 2, 9, 8, 3, 11, 4, 5, 10, 1, 11, 10, 0, 9, 10, 5, 7, 2, 0, 10, 9, 8, 11, 1, 3, 6, 4, 11, 8]
        uniform token orientation = "leftHanded"
        point3f[] points = [(0.5, -0.5, 4), (-0.5, -0.5, 4), (0.5, 0.5, 4), (-0.5, 0.5, 4), (-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0), (-0.5, 0.5, 2), (0.5, 0.5, 2), (0.5, -0.5, 2), (-0.5, -0.5, 2)]
        matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        int[] primvars:skel:jointIndices = [2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1] (
            elementSize = 1
            interpolation = "vertex"
        )
        float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
            elementSize = 1
            interpolation = "vertex"
        )
        rel skel:skeleton = </Model/Skel>
        uniform token subdivisionScheme = "none"
    }
}

