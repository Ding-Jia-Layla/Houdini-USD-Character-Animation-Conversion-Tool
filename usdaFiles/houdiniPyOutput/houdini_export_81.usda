#usda 1.0
(
    defaultPrim = "Model"
    endTimeCode = 60
    metersPerUnit = 0.01
    startTimeCode = 1
    upAxis = "Y"
)

def SkelRoot "Model" (
    prepend apiSchemas = ["SkelBindingAPI"]
    kind = "component"
)
{
    def Skeleton "Skel" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 2, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 4, 1) )]
        uniform token[] joints = ["arm_Shoulder", "arm_Shoulder/arm_Elbow", "arm_Shoulder/arm_Elbow/arm_Hand"]
        uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 2, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 2, 1) )]
        rel skel:animationSource = </Model/Skel/Anim>

        def SkelAnimation "Anim"
        {
            uniform token[] joints = ["arm_Shoulder", "arm_Shoulder/arm_Elbow", "arm_Shoulder/arm_Elbow/arm_Hand"]
            quatf[] rotations.timeSamples = {
                1: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                2: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
                3: [(1, 0, 0, 0), (0.9996373, 0.0269305, 0, 0), (1, 0, 0, 0)],
                4: [(1, 0, 0, 0), (0.99509203, 0.09895403, 0, 0), (1, 0, 0, 0)],
                5: [(1, 0, 0, 0), (0.9793411, 0.20221518, 0, 0), (1, 0, 0, 0)],
                6: [(1, 0, 0, 0), (0.9468448, 0.32169065, 0, 0), (1, 0, 0, 0)],
                7: [(1, 0, 0, 0), (0.8969943, 0.44204208, 0, 0), (1, 0, 0, 0)],
                8: [(1, 0, 0, 0), (0.8354917, 0.549503, 0, 0), (1, 0, 0, 0)],
                9: [(1, 0, 0, 0), (0.77361345, 0.6336578, 0, 0), (1, 0, 0, 0)],
                10: [(1, 0, 0, 0), (0.72589976, 0.6878005, 0, 0), (1, 0, 0, 0)],
            }
            half3[] scales.timeSamples = {
                1: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                2: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                3: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                4: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                5: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                6: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                7: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                8: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                9: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
                10: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            }
            float3[] translations.timeSamples = {
                1: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                2: [(0, 0, 0), (0, 0, 2), (0, 0, 2)],
                3: [(0, 0, 0), (0, 0, 2), (0, -6.418407e-9, 1.9999999)],
                4: [(0, 0, 0), (0, 0, 2), (0, 2.3476742e-8, 2)],
                5: [(0, 0, 0), (0, 0, 2), (0, 4.721609e-8, 2)],
                6: [(0, 0, 0), (0, 0, 2), (0, -4.440892e-16, 2)],
                7: [(0, 0, 0), (0, 0, 2), (0, -9.4536226e-8, 1.9999999)],
                8: [(0, 0, 0), (0, 0, 2), (0, 5.4730386e-8, 2)],
                9: [(0, 0, 0), (0, 0, 2), (0, -8.765718e-8, 2)],
                10: [(0, 0, 0), (0, 0, 2), (0, -5.207933e-8, 2)],
            }
        }
    }

    def Mesh "Mesh" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [3, 1, 0, 2, 7, 5, 4, 6, 9, 7, 6, 8, 2, 9, 8, 3, 11, 4, 5, 10, 1, 11, 10, 0, 9, 10, 5, 7, 2, 0, 10, 9, 8, 11, 1, 3, 6, 4, 11, 8]
        uniform token orientation = "rightHanded"
        point3f[] points = [(0.5, -0.5, 4), (-0.5, -0.5, 4), (0.5, 0.5, 4), (-0.5, 0.5, 4), (-0.5, -0.5, 0), (0.5, -0.5, 0), (-0.5, 0.5, 0), (0.5, 0.5, 0), (-0.5, 0.5, 2), (0.5, 0.5, 2), (0.5, -0.5, 2), (-0.5, -0.5, 2)]
        matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        int[] primvars:skel:jointIndices = [2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1] (
            elementSize = 1
            interpolation = "vertex"
        )
        float[] primvars:skel:jointWeights = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
            elementSize = 1
            interpolation = "vertex"
        )
        rel skel:skeleton = </Model/Skel>
        uniform token subdivisionScheme = "none"
    }
}

