#usda 1.0
(
    defaultPrim = "usdexport1"
    endTimeCode = 1
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "CubeAgent" (
    kind = "component"
)
{
    def Xform "Rig"
    {
        string[] primvars:agentname = ["Agent_from_rig_rest_pose"] (
            interpolation = "constant"
        )
        int[] primvars:agentname:indices = None
        float4[] primvars:boneCapture = [(-1, -1, -1, -1)] (
            interpolation = "constant"
        )
        int[] primvars:boneCapture:indices = None
        normal3f[] primvars:N = [(0, 0, 0)] (
            interpolation = "constant"
        )
        int[] primvars:N:indices = None
        float[] primvars:pCaptFrame = [1] (
            interpolation = "constant"
        )
        int[] primvars:pCaptFrame:indices = None
        string[] primvars:pCaptSkelRoot = [""] (
            interpolation = "constant"
        )
        int[] primvars:pCaptSkelRoot:indices = None
        append rel skel:animationSource = </CubeAgent/Rig/animation>
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def SkelAnimation "animation"
        {
            uniform token[] joints = ["BottomJoint", "__locomotion__", "BottomJoint/TopJoint"]
            quatf[] rotations.timeSamples = {
                1: [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)],
            }
            half3[] scales.timeSamples = {
                1: [(1, 1, 1), (1, 1, 1), (1, 1, 1)],
            }
            float3[] translations.timeSamples = {
                1: [(0, 0, 0), (0, 0, 0), (0, 1, 0)],
            }
        }
    }
}

def Xform "usdexport1" (
    kind = "component"
)
{
    def Mesh "Cube_Geometry" (
        prepend apiSchemas = ["SkelBindingAPI"]
    )
    {
        float3[] extent = [(-0.5, 0, -0.5), (0.5, 1, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 4, 5, 7, 6, 6, 7, 2, 3, 5, 4, 1, 0, 5, 0, 2, 7, 1, 4, 6, 3]
        normal3f[] normals = [(0, 0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (0, -0, -1), (-0, -0, -1), (-0, 0, -1), (-0, -0, -1), (-0, 1, -0), (-0, 1, -0), (-0, 1, -0), (0, 1, 0), (-0, -1, -0), (-0, -1, 0), (-0, -1, -0), (0, -1, -0), (1, -0, -0), (1, -0, -0), (1, -0, -0), (1, 0, 0), (-1, -0, -0), (-1, 0, -0), (-1, -0, -0), (-1, -0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token orientation = "leftHanded"
        point3f[] points = [(0.5, 0, 0.5), (-0.5, 0, 0.5), (0.5, 1, 0.5), (-0.5, 1, 0.5), (-0.5, 0, -0.5), (0.5, 0, -0.5), (-0.5, 1, -0.5), (0.5, 1, -0.5)] (
            interpolation = "vertex"
        )
        string[] primvars:agentname = ["", "", "", "", "", "", "", ""] (
            interpolation = "vertex"
        )
        int[] primvars:agentname:indices = None
        float[] primvars:pCaptFrame = [1] (
            interpolation = "constant"
        )
        int[] primvars:pCaptFrame:indices = None
        string[] primvars:pCaptSkelRoot = [""] (
            interpolation = "constant"
        )
        int[] primvars:pCaptSkelRoot:indices = None
        uniform matrix4d primvars:skel:geomBindTransform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform int[] primvars:skel:jointIndices = [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1] (
            elementSize = 2
            interpolation = "vertex"
        )
        uniform float[] primvars:skel:jointWeights = [1, 0, 1, 0, 0.748835, 0.251165, 0.65854543, 0.34145454, 0.9990712, 0.00092881464, 1, 0, 0.6946166, 0.30538335, 0.7648707, 0.23512931] (
            elementSize = 2
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }

    def Scope "agentdefinitions"
    {
        uniform token visibility = "invisible"

        def Scope "Agent_from_rig_rest_pose"
        {
            def Scope "layers"
            {
            }

            def Scope "shapelibrary"
            {
            }

            def Skeleton "skeleton"
            {
                uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (0.9999999403953552, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 1, 0, 1) )]
                uniform token[] jointNames = ["BottomJoint", "__locomotion__", "TopJoint"]
                uniform token[] joints = ["BottomJoint", "__locomotion__", "BottomJoint/TopJoint"]
                uniform token purpose = "guide"
                uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (0.9999999403953552, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 1, 0, 1) )]
            }
        }
    }
}

